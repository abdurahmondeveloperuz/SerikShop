from aiogram.types import CallbackQuery,Message,ParseMode
from aiogram.dispatcher import FSMContext
from keyboards.inline.admin_keys import amazon,discord,avito,samokat,sbermarket,ebay,tinder,instagram,facebook,microsoft,apple,paypal,steam,telegram,uber,twitter,whatsapp,vkontakte,tiktok,yandex,gmail
from keyboards.default.buttons import numbers_list_one_admin,ortga_to_main,ortga_to_panel
from aiogram import Bot, Dispatcher, executor, types 
from time import sleep
import datetime as dt
import pytz
from aiogram.types import InlineKeyboardMarkup,InlineKeyboardButton
from aiogram.dispatcher import FSMContext
from loader import dp,db,bot,balance,price
def get_keyboard(product):
    if product=="amazon":
        return amazon
    elif product=="instagram":
        return instagram
    elif product=='facebook':
        return facebook
    elif product=='discord':
        return discord
    elif product=='avito':
        return avito
    elif product=='samokat':
        return samokat
    elif product=='sbermarket':
        return sbermarket
    elif product=='ebay':
        return ebay
    elif product=='tinder':
        return tinder
    elif product=='apple':
        return apple
    elif product=='microsoft':
        return microsoft
    elif product=='steam':
        return steam
    elif product=='telegram':
        return telegram
    elif product=='twitter':
        return twitter
    elif product=='whatsapp':
        return whatsapp
    elif product=='uber':
        return uber
    elif product=='vkontakte':
        return vkontakte
    elif product=='tiktok':
        return tiktok
    elif product=='google':
        return gmail
    elif product=='yandex':
        return yandex
    else:
        return numbers_list_one_admin
@dp.callback_query_handler(text='number_prices')
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å!",reply_markup=numbers_list_one_admin)
@dp.callback_query_handler(text="instagram_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=instagram)

@dp.callback_query_handler(text="facebook_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=facebook)

@dp.callback_query_handler(text="amazon_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=amazon)

@dp.callback_query_handler(text="discord_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=discord)

@dp.callback_query_handler(text="avito_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=avito)

@dp.callback_query_handler(text="samokat_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=samokat)

@dp.callback_query_handler(text="sbermarket_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=sbermarket)

@dp.callback_query_handler(text="ebay_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=ebay)

@dp.callback_query_handler(text="tinder_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=tinder)

@dp.callback_query_handler(text="microsoft_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=microsoft)

@dp.callback_query_handler(text="apple_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=apple)



@dp.callback_query_handler(text="paypal_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=paypal)

@dp.callback_query_handler(text="steam_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=steam)

@dp.callback_query_handler(text="telegram_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=telegram)

@dp.callback_query_handler(text="uber_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=uber)

@dp.callback_query_handler(text="twitter_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=twitter)

@dp.callback_query_handler(text="whatsup_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=whatsapp)

@dp.callback_query_handler(text="vkontakte_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=vkontakte)

@dp.callback_query_handler(text="tiktok_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=tiktok)

@dp.callback_query_handler(text="gmail_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=gmail)

@dp.callback_query_handler(text="yandex_edit")
async def select_country_instagram(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚úèÔ∏è–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É, –≤ –∫–æ—Ç–æ—Ä–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É!",reply_markup=yandex)
@dp.callback_query_handler(lambda c: c.data.startswith('admin:'))
async def return_number(call: types.CallbackQuery):
    await call.message.delete()
    datas = call.data.split(':')
    country = datas[1]
    product = datas[2]
    number_price = price.get_price(f'{country}:{product}')
    user_balance = balance.get_balance(user_id=call.from_user.id)

    get_number = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",callback_data=f"edit:{country}:{product}:{number_price}"),
    ],
    [
        InlineKeyboardButton("üîô H–∞–∑–∞–¥", callback_data=f"back_admin:{product}")
    ]
])
    await call.message.answer(f"""
üìå –í—ã –≤—ã–±—Ä–∞–ª–∏

üåê –°–µ—Ä–≤–∏—Å: {product.capitalize()}
üîÑ –°—Ç—Ä–∞–Ω–∞: {country.capitalize()}
üí∏ T–µ–∫—É—â–∏–π c—É–º–º–∞: {number_price} ‚ÇΩ


""",reply_markup=get_number)
@dp.callback_query_handler(lambda c: c.data.startswith('edit:'))
async def return_number(call: types.CallbackQuery,state:FSMContext):
    await call.message.delete()
    datas = call.data.split(':')
    country = datas[1]
    product = datas[2]
    number_price_latest = datas[3]
    number_price = price.get_price(f'{country}:{product}')
    await call.message.answer(f'''
<b>‚úçÔ∏è–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É:</b>


üåê –°–µ—Ä–≤–∏—Å: {product.capitalize()}
üîÑ –°—Ç—Ä–∞–Ω–∞: {country.capitalize()}
üí∏ T–µ–∫—É—â–∏–π c—É–º–º–∞: {number_price} ‚ÇΩ

''',reply_markup=ortga_to_panel)
    await state.update_data({f'datas_{call.from_user.id}':datas})
    await state.set_state('get_summa')
@dp.message_handler(state='get_summa')
async def return_number(message: types.Message,state:FSMContext):
    
    state_data = await state.get_data()
    datas = state_data.get(f'datas_{message.from_user.id}')
    print(datas)
    price.save_price(f'{datas[1]}:{datas[2]}',f'{message.text}')
    number_price = price.get_price(f'{datas[1]}:{datas[2]}')
    await state.finish()
    await message.answer(f"""
‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ

üåê –°–µ—Ä–≤–∏—Å: {datas[2].capitalize()}
üîÑ –°—Ç—Ä–∞–Ω–∞: {datas[1].capitalize()}
üí∏ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—É–º–º–∞: {datas[3]} ‚ÇΩ
üí∏ T–µ–∫—É—â–∏–π c—É–º–º–∞: {number_price} ‚ÇΩ
""",reply_markup=ortga_to_panel)
@dp.callback_query_handler(lambda c: c.data.startswith('back_admin:'))
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    keyboard_name = get_keyboard(call.data.split(':')[1])
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=keyboard_name)

@dp.callback_query_handler(text="users_settings")
async def stats_users(call:types.CallbackQuery,state:FSMContext):
    await call.message.delete()
    await call.message.answer("üÜî–ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—á–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞:",reply_markup=ortga_to_panel)
    await state.set_state("next_state")
    
@dp.message_handler(state="next_state")
async def stats_users(message:types.Message,state:FSMContext):
    await state.finish()
    user = message.text
    try:
        user_data = await bot.get_chat(user)
    except: 
        await message.answer("ü§∑üèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ—Ç–µ",reply_markup=ortga_to_panel)
        return 
    buttons = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ûï –°—á–µ—Ç",callback_data=f"plus:{user}"),
        InlineKeyboardButton(text="‚ûñ –°—á–µ—Ç",callback_data=f"minus:{user}")        

    ],
    [
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",callback_data=f"refresh:{user}")        

    ],
    [
        InlineKeyboardButton(text="üîô ",callback_data="ortga_to_panel")        
    ]
])
    bot_start_date = dt.date(2023, 8, 25)
    farq = dt.date.today() - bot_start_date
    user_balance = balance.get_balance(user_id=user)
    await message.answer(f"""
<b>üìõ User –∏–º—è:</b> <i>{user_data.first_name}</i>
<b>‚úä User –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{user_data.username}
<b>üÜî User –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{user_data.id}</code>
<b>üí∞ User –±–∞–ª–∞–Ω—Å:</b> <tg-spoiler>{user_balance} ‚ÇΩ</tg-spoiler>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>‚è∏ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:</b>{bot_start_date}
<b>üìÜ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b>20{dt.datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%y-%m-%d %H:%M')}
üóì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>{farq.days}</b> –¥–Ω–µ–π
""",reply_markup=buttons)

@dp.callback_query_handler(text_contains="minus")
async def stats_users(call:types.CallbackQuery,state:FSMContext):
    user = call.data.replace("minus:","")
    await call.message.answer("‚ûñ –ß—Ç–æ–±—ã –≤—ã—á–∏—Ç–∞–Ω–∏–µ —Å—á–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ ‚ÇΩ:",reply_markup=ortga_to_panel)
    await state.update_data({f"{call.from_user.id}":f"{user}"})
    await state.set_state("min_balance")
@dp.callback_query_handler(text_contains="refresh")
async def stats_users(call:types.CallbackQuery,state:FSMContext):
    user = call.data.replace("refresh:","")
    try:
        user_data = await bot.get_chat(user)
    except: 
        await call.message.answer("ü§∑üèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ—Ç–µ",reply_markup=ortga_to_panel)
        return 
    buttons = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text="‚ûï –°—á–µ—Ç",callback_data=f"plus:{user}"),
        InlineKeyboardButton(text="‚ûñ –°—á–µ—Ç",callback_data=f"minus:{user}")        

    ],
    [
        InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",callback_data=f"refresh:{user}")        

    ],
    [
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",callback_data="ortga_to_panel")        
    ]
])
    bot_start_date = dt.date(2023, 8, 25)
    farq = dt.date.today() - bot_start_date
    user_balance = balance.get_balance(user_id=user)
    try:
        await call.message.edit_text(f"""
<b>üìõ User –∏–º—è:</b> <i>{user_data.first_name}</i>
<b>‚úä User –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{user_data.username}
<b>üÜî User –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{user_data.id}</code>
<b>üí∞ User –±–∞–ª–∞–Ω—Å:</b> <tg-spoiler>{user_balance} ‚ÇΩ</tg-spoiler>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>‚è∏ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:</b>{bot_start_date}
<b>üìÜ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b>20{dt.datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%y-%m-%d %H:%M')}
üóì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>{farq.days}</b> –¥–Ω–µ–π
""",reply_markup=buttons)   
    except:
        await call.answer("‚ùå Hech narsa o'zgarmadi!")
@dp.message_handler(state="min_balance")
async def stats_users(message:types.Message,state:FSMContext):
    state_data = await state.get_data()
    user = state_data.get(f"{message.from_user.id}")
    try:
        amount = float(message.text)
    except: 
        await message.answer("üî¢–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!",reply_markup=ortga_to_panel)
        await state.set_state("next_state_2")
        return

    try:
        balance.minus_balance(user_id=user,amount=float(message.text))
        try:
            user_data = await bot.get_chat(user)
        except: 
            await message.answer("ü§∑üèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ—Ç–µ",reply_markup=ortga_to_panel)
            return 
        buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°—á–µ—Ç",callback_data=f"plus:{user}"),
            InlineKeyboardButton(text="‚ûñ –°—á–µ—Ç",callback_data=f"minus:{user}")        

        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",callback_data=f"refresh:{user}")        

        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",callback_data="ortga_to_panel")        
        ]
    ])
        bot_start_date = dt.date(2023, 8, 25)
        farq = dt.date.today() - bot_start_date
        user_balance = balance.get_balance(user_id=user)
        await message.answer(f"""
    <b>üìõ User –∏–º—è:</b> <i>{user_data.first_name}</i>
    <b>‚úä User –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{user_data.username}
    <b>üÜî User –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{user_data.id}</code>
    <b>üí∞ User –±–∞–ª–∞–Ω—Å:</b> <tg-spoiler>{user_balance} ‚ÇΩ</tg-spoiler>
    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    <b>‚è∏ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:</b>{bot_start_date}
    <b>üìÜ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b>20{dt.datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%y-%m-%d %H:%M')}
    üóì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>{farq.days}</b> –¥–Ω–µ–π
    """,reply_markup=buttons)
    except:
        await message.answer("""
ü§∑üèª‚Äç‚ôÇÔ∏è—è –¥—É–º–∞—é, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

üí∞–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –Ω–µ –≤—ã—á–∏—Ça–ª—Å—è!
‚ôªÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!
""",reply_markup=ortga_to_panel)
    await state.finish()


@dp.callback_query_handler(text_contains="plus")
async def stats_users(call:types.CallbackQuery,state:FSMContext):
    user = call.data.replace("plus:","")
    await call.message.answer("‚ûï –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å—á–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ ‚ÇΩ:",reply_markup=ortga_to_panel)
    await state.update_data({f"{call.from_user.id}":f"{user}"})
    await state.set_state("pls_balance")
    
@dp.message_handler(state="pls_balance")
async def stats_users(message:types.Message,state:FSMContext):
    state_data = await state.get_data()
    user = state_data.get(f"{message.from_user.id}")
    try:
        amount = float(message.text)
    except: 
        await message.answer("üî¢–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä!",reply_markup=ortga_to_panel)
        await state.set_state("next_state_2")
        return

    try:
        balance.update_balance(user_id=user,amount=float(message.text))
        try:
            user_data = await bot.get_chat(user)
        except: 
            await message.answer("ü§∑üèª‚Äç‚ôÇÔ∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –±–æ—Ç–µ",reply_markup=ortga_to_panel)
            return 
        buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –°—á–µ—Ç",callback_data=f"plus:{user}"),
            InlineKeyboardButton(text="‚ûñ –°—á–µ—Ç",callback_data=f"minus:{user}")        

        ],
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",callback_data=f"refresh:{user}")        

        ],
        [
            InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥",callback_data="ortga_to_panel")        
        ]
    ])
        bot_start_date = dt.date(2023, 8, 25)
        farq = dt.date.today() - bot_start_date
        user_balance = balance.get_balance(user_id=user)
        await message.answer(f"""
    <b>üìõ User –∏–º—è:</b> <i>{user_data.first_name}</i>
    <b>‚úä User –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{user_data.username}
    <b>üÜî User –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{user_data.id}</code>
    <b>üí∞ User –±–∞–ª–∞–Ω—Å:</b> <tg-spoiler>{user_balance} ‚ÇΩ</tg-spoiler>
    ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
    <b>‚è∏ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:</b>{bot_start_date}
    <b>üìÜ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b>20{dt.datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%y-%m-%d %H:%M')}
    üóì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>{farq.days}</b> –¥–Ω–µ–π
    """,reply_markup=buttons)
        

    except:
        await message.answer("""
ü§∑üèª‚Äç‚ôÇÔ∏è—è –¥—É–º–∞—é, –≤—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!

üí∞–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è!
‚ôªÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑
""",reply_markup=ortga_to_panel)
    await state.finish()