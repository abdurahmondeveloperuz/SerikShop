import logging
from aiogram.types import CallbackQuery,Message,ParseMode
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor, types
from keyboards.default.buttons import buttons,panel_tugma,tugmasi,tugmasi_rek,tugmasi_user,channel_tools,ban_tools,ortga_to_panel,admin_tugma,ortga_to_main,bot_on_off,numbers_list_one,numbers_list_two,numbers_list_one_admin,numbers_list_two_admin
from datetime import datetime
from loader import dp,db,bot,balance
from data.config import ADMINS,fivesimnettoken as token
import pytz
from utils.api import get_balance
from time import sleep
import datetime as dt

@dp.callback_query_handler(text="buy_number")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚ô¶Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É!",reply_markup=numbers_list_one)
@dp.callback_query_handler(text="buy_number")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time = 30)
    await call.message.delete()
    await call.message.answer("‚ô¶Ô∏è –ù–∞–∂–º–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–Ω–æ–ø–∫—É!",reply_markup=numbers_list_one)
@dp.callback_query_handler(text="next")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîú –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!",reply_markup=numbers_list_two)
@dp.callback_query_handler(text="previus")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!",reply_markup=numbers_list_one)

@dp.callback_query_handler(text="next_edit")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîú –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!",reply_markup=numbers_list_two_admin)
@dp.callback_query_handler(text="previus_edit")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!",reply_markup=numbers_list_one_admin)
@dp.callback_query_handler(state="*",text="ortga_to_main")
async def stats_users(call:types.CallbackQuery,state:FSMContext):
    await state.finish()
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=buttons)
@dp.callback_query_handler(text="ortga_to_main")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=buttons)
@dp.callback_query_handler(state='*',text="ortga_panel")
async def send_ad_to_all(call: types.CallbackQuery,state:FSMContext):
    await state.finish()
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –•–æ—Ä–æ—ào –≤–µ—Ä–Ω—É–ª—Å—è",reply_markup=panel_tugma)
@dp.callback_query_handler(text="ortga_panel")
async def send_ad_to_all(call: types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –•–æ—Ä–æ—ào –≤–µ—Ä–Ω—É–ª—Å—è",reply_markup=panel_tugma)
@dp.callback_query_handler(text="ortga_to_social_one_admin")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=numbers_list_one_admin)
@dp.callback_query_handler(text="ortga_to_social_two_admin")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=numbers_list_two_admin)
@dp.callback_query_handler(text="ortga_to_social_one")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=numbers_list_one)
@dp.callback_query_handler(text="ortga_to_social_two")
async def stats_users(call:types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üîô –í–µ—Ä–Ω—É–ª—Å—è",reply_markup=numbers_list_two)
@dp.callback_query_handler(text="balance")
async def bot_stat(call: types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    bot_start_date = dt.date(2023, 8, 25)
    farq = dt.date.today() - bot_start_date
    user_balance = balance.get_balance(user_id=call.from_user.id)
    await call.message.answer(f"""
<b>üìõ –í–∞—à–µ –∏–º—è:</b> <i>{call.message.chat.first_name}</i>
<b>‚úä –í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> @{call.message.chat.username}
<b>üÜî –í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä:</b> <code>{call.message.chat.id}</code>
<b>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> <tg-spoiler>{user_balance} ‚ÇΩ</tg-spoiler>
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
<b>‚è∏ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:</b>{bot_start_date}
<b>üìÜ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b>20{dt.datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%y-%m-%d %H:%M')}
üóì –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>{farq.days}</b> –¥–Ω–µ–π
""",reply_markup=ortga_to_main)


@dp.callback_query_handler(text="sts")
async def bot_stat(call: types.CallbackQuery):
    await call.answer(cache_time=30)
    await call.message.delete()
    with open("middlewares/banned_users.txt", "r") as file:
        user_ids = file.read()
        user_ids = user_ids.split("/")
    print(user_ids)
    for user_id in user_ids:
        if user_id == '':
            user_ids.remove('')
        
    blocked = len(user_ids)
    unblocked = int(db.count_users()[0]) - int(blocked)
    users = db.select_all_users()
    bot_start_date = dt.date(2023, 8, 25)
    farq = dt.date.today() - bot_start_date
    await call.message.answer(f"<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
                         f"<b>‚úÖ –ê–∫—Ç–∏–≤–Ω–æ:</b> {unblocked}\n"
                         f"<b>‚ùå –ë–∞–Ω:</b> {blocked}\n"
                         f"<b>üî∞ –í—Å–µ–≥–æ:</b> {blocked+unblocked}\n"
                         f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                         f"<b>‚è∏ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞:</b> {bot_start_date}\n"
                         f"<b>üìÜ –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> 20{dt.datetime.now(pytz.timezone('Asia/Tashkent')).strftime('%y-%m-%d %H:%M')}\n"
                         f"üóì–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç <b>{farq.days}</b> –¥–Ω–µ–π",reply_markup=ortga_to_main)
@dp.message_handler(text_contains = "/admin")
async def find_player_with_name(message: types.Message,state:FSMContext):
    await message.answer("–ù–∞–∂–º–∏—Ç–µ!",reply_markup=admin_tugma)



@dp.callback_query_handler(text="admin_panel")
async def adminusermsg(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    
    await call.message.answer("‚úã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –µ—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞... ")
    sleep(0.5)
    user_id = call.from_user.id
    for admin in ADMINS:
        if int(admin) == int(user_id):

            a = True
            break

        else:
            
            a = False

    if a:
        await call.message.answer("‚úÖ–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",reply_markup=panel_tugma)
    else:
        await call.message.answer("‚ùå–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")

@dp.callback_query_handler(text="rek_user_message")
async def adminusermsg(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üì©–†–µ–∫–ª–∞–º–∞ –∏ üë§–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",reply_markup=tugmasi)
@dp.callback_query_handler(text="rek_xb")
async def adminusermsg(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üì© –†–µ–∫–ª–∞–º–∞",reply_markup=tugmasi_rek)

@dp.callback_query_handler(text="user_xb")
async def adminusermsg(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üë§ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",reply_markup=tugmasi_user)









@dp.callback_query_handler(text="oddiy_xb_rek")
async def send_ad_to_all(call: types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("‚úçÔ∏è–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ –Ω–æ–≤–æ—Å—Ç–∏!",reply_markup=ortga_to_panel)

    await state.set_state("xabar")
@dp.message_handler(state="xabar",content_types=["any"])
async def xb_func(message:types.Message,state:FSMContext):
    await state.finish()
    users = db.select_all_users()

    message_text = message.text
    count = 0 
    for user in users:
        user_id = user[0]
        try: 
            await bot.send_message(chat_id=user_id, text=message_text)
            sleep(0.05)
        except:
            count+=1
    await message.answer(f"ü§ñ–£ –±–æ—Ç–∞ {len(users)}–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n ‚óæÔ∏è{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n ‚óΩÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {int(len(users))-int(count) } –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",reply_markup=ortga_to_panel)


@dp.callback_query_handler(text="forward_xb_rek")
async def send_ad_to_all(call: types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()

    await call.message.answer("üí¨O—Ç–ø—Ä–∞–≤—Ç–µ –º–Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!",reply_markup=ortga_to_panel)

    await state.set_state("frward_xb")
@dp.message_handler(state="frward_xb",content_types=["any"])
async def send_to_me(message:types.Message,state:FSMContext):
    await state.finish()

    users = db.select_all_users()
    message_text = message.text
    count = 0
    for user in users:
        user_id = user[0]
        try: 

            await bot.forward_message(chat_id=user_id, from_chat_id=ADMINS[0], message_id=message.message_id)
            sleep(0.005)
        except Exception as e:
            count+=1
            print(e)
    await message.answer(f"ü§ñ–£ –±–æ—Ç–∞ {len(users)}–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:\n ‚óæÔ∏è{count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞, –ø–æ—ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n ‚óΩÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {int(len(users))-int(count) } –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",reply_markup=ortga_to_panel)
    await state.finish()




@dp.callback_query_handler(text="oddiy_xb_user")
async def send_ad_to_all(call: types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()

    await call.message.answer("üÜî–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=ortga_to_panel)

    await state.set_state("xabar_user_id")

@dp.message_handler(state="xabar_user_id")
async def xb_user_id(message:types.Message,state:FSMContext):
    await state.update_data({f"{message.from_user.id}":message.text})

    await message.answer("‚úçÔ∏è–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!",reply_markup=ortga_to_panel)

    await state.set_state("xabar_007")
@dp.message_handler(state="xabar_007")
async def xb_hammaga(message:types.Message,state:FSMContext):
    state_data = await state.get_data(f"{message.from_user.id}")
    message_text = message.text
    user_id = state_data.get(f"{message.from_user.id}")
    await state.finish()
    print(user_id)
    try:
        await bot.send_message(chat_id=user_id, text=message_text)
        await message.answer(f"ü§ñ–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –±–æ—Ç–µ:\n ‚óΩÔ∏è{user_id} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞",reply_markup=ortga_to_panel)

    except Exception as e:
        await message.answer(f"ü§ñ–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ –±–æ—Ç–µ:\n ‚óæÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!",reply_markup=ortga_to_panel)
        print(e)

@dp.callback_query_handler(text="forward_xb_user")
async def send_ad_to_all__(call: types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()

    await call.message.answer("üÜî–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=ortga_to_panel)

    await state.set_state("xb_frwrd_user_id")

@dp.message_handler(state="xb_frwrd_user_id")
async def player_speed(message:types.Message,state:FSMContext):
    await state.update_data({f"{message.from_user.id}":message.text})

    await message.answer("‚úçÔ∏è–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è!",reply_markup=ortga_to_panel)

    await state.set_state("xabar_007_user")
@dp.message_handler(state="xabar_007_user")
async def send_to_all_(message:types.Message,state:FSMContext):
    state_data = await state.get_data(f"{message.from_user.id}")
    message_text = message.text
    await state.finish() 

    user_id = state_data.get(f"{message.from_user.id}")
    try:
        await bot.forward_message(chat_id=user_id, from_chat_id=ADMINS[0], message_id=message.message_id)
        await message.answer(f"ü§ñ–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞ –±–æ—Ç–µ:\n ‚óΩÔ∏è{user_id} –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–Ω –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞",reply_markup=ortga_to_panel)

    except:
        await message.answer(f"ü§ñ–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤ –±–æ—Ç–µ:\n ‚óæÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, —Ç.–∫. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞!",reply_markup=ortga_to_panel)


              
@dp.callback_query_handler(text="new_channel")
async def send_ad_to_all(call: types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("<b>‚úçÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ö–æ—Ä–æ—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞!</b>\n\n<i>*–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ —Å–∏–º–≤–æ–ª @ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª–∞!</i>",reply_markup=ortga_to_panel)

    await state.set_state("channels")
@dp.message_handler(state="channels")
async def deleteAllChannels(message:types.Message,state:FSMContext):
    with open("data/channels.txt","a+") as file:
        channels = file.read()
        channels+=f",{message.text}"
        file.write(channels)
    await message.answer("‚úÖ–í–∞—à –∫–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",reply_markup=ortga_to_panel)
    
    await state.finish()



@dp.callback_query_handler(text="del_all_channels")
async def player_speed(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    with open("data/channels.txt","w+") as file:
        file.write("")
    await call.message.answer("‚úÖ–í—Å–µ –∫–∞–Ω–∞–ª—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞",reply_markup=ortga_to_panel)
    
@dp.callback_query_handler(text="channels_list")
async def list_channels(call:CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    with open("data/channels.txt","r") as file:
        read_file = file.read()
        read_file_list = read_file.split(",")
        matn = ""
        count = 0
        for channel in read_file_list:

            if channel!="":
                count+=1
                matn+=f"\n      {count}.üëâ@{channel}üëà"

        await call.message.answer(f"üì°–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤: {matn}",reply_markup=ortga_to_panel)







@dp.callback_query_handler(text="bot_off")
async def banMan(call:types.CallbackQuery,state:FSMContext):
    await call.message.delete()
    await call.answer(cache_time=30)
    await call.message.answer("‚ùå–•–æ—Ä–æ—ào –∞–¥–º–∏–Ω-–±–æ—Ç viklyuchon.",reply_markup=ortga_to_panel)
    with open("middlewares/bot_stop.txt","w") as file:
        file.write("0")
@dp.callback_query_handler(text="bot_on")
async def banMan(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("‚úÖ–í–∫–ª—é—á–µ–Ω —Ö–æ—Ä–æ—à–∏–π –∞–¥–º–∏–Ω-–±–æ—Ç.",reply_markup=ortga_to_panel)
    with open("middlewares/bot_stop.txt","w") as file:
        file.write("1")
@dp.callback_query_handler(text="ban_man")
async def banMan(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üÜî–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=ortga_to_panel)
    await state.set_state("to_ban_user_id")
@dp.message_handler(state="to_ban_user_id")
async def banMAN(message:types.Message,state:FSMContext):
    user_id = message.text
    with open("middlewares/banned_users.txt","r+") as file:
        idlar = file.read()
        idlar = idlar.split("/")
        if str(user_id) in idlar:
            await message.answer("üö∑–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω!",reply_markup=ortga_to_panel)
        else:
            file.write(f"{user_id}/")
            await message.answer("üö∑–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω",reply_markup=ortga_to_panel)
            await bot.send_message(chat_id=user_id,text="‚ùå–í–∞—Å –∑–∞–±–∞–Ω–∏–ª–∏ –≤ –±–æ—Ç–µ")


    
    await state.finish()
@dp.callback_query_handler(text="unban_man")
async def banMan(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üÜî–í–≤–µ–¥–∏—Ç–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",reply_markup=ortga_to_panel)
    await state.set_state("to_unban_user_id")

@dp.message_handler(state="to_unban_user_id")
async def banMAN(message:types.Message,state:FSMContext):
    user_id = message.text
    with open("middlewares/banned_users.txt","r") as file:
        file_data = file.read()
        user_ids = file_data.split("/")
        for user_id1 in user_ids:
            if str(user_id1) == str(user_id):
                a = True
                break
            else:
                a = False

        if a:

            user_ids.remove(user_id)
            await bot.send_message(chat_id=user_id,text=f"–í–∞–º –∑–∞–±–∞–Ω–µ–Ω –±–æ—Ç.")
            await message.answer("‚úÖ–•–æ—Ä–æ—ào –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω!",reply_markup=ortga_to_panel)
        else:
            await message.answer("‚ùå–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–Ω—å—à–µ –Ω–µ –±—ã–ª —Ä–∞–±–æ–º!",reply_markup=ortga_to_panel)     
        matn = ""
        for user_id_new in user_ids:
            matn+=f"{user_id_new}/"
        print(matn)
    with open("middlewares/banned_users.txt","w") as file:

        file.write(matn)
    await state.finish()





@dp.callback_query_handler(text="unban_men")
async def banMan(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("‚úÖXorosho",reply_markup=ortga_to_panel)
    with open("middlewares/banned_users.txt","w") as file:
        pass 
@dp.callback_query_handler(text="del_channel")
async def banMan(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("üìõ–í–æ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (@ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç):",reply_markup=ortga_to_panel)
    await state.set_state("channel_username")
@dp.message_handler(state="channel_username")
async def DelChannel(message:types.Message,state:FSMContext):
    with open("data/channels.txt","r") as file:
        file_data = file.read()
        channel_users = file_data.split(",")

        for channel_user in channel_users:
            if str(channel_user) == str(message.text):
                a = True

                channel_users.remove(channel_user)
                break
            else:
                a = False
                print(channel_user,message.text)

        if a:
            await message.answer("‚ûñ–•–æ—Ä–æ—ào –∫–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞",reply_markup=ortga_to_panel)
            matn = ""
            with open("data/channels.txt","w") as file:
                for channel_user in channel_users:
                    matn+=f",{channel_user}"


        else:
            await message.answer("‚ùå–≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ø–∏—Å–∫–µ",reply_markup=ortga_to_panel)
        await state.finish()


 
@dp.callback_query_handler(text="channel_tools")
async def channel__tools(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("ü§ô–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω!",reply_markup=channel_tools)

@dp.callback_query_handler(text="ban_tools")
async def ban__tools(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("ü§ô–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω!",reply_markup=ban_tools)
@dp.callback_query_handler(text="bot_on_off")
async def data_dls_tools(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    await call.message.answer("ü§ô–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω!",reply_markup=bot_on_off)
@dp.callback_query_handler(text="balance_api")
async def data_dls_tools(call:types.CallbackQuery,state:FSMContext):
    await call.answer(cache_time=30)
    await call.message.delete()
    balance = await get_balance(api_token=token) 
    balance = balance.balance
    await call.message.answer(f"üí∞ Balans: {balance}‚ÇΩ ",reply_markup=ortga_to_panel)

